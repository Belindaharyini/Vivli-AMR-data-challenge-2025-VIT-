# -*- coding: utf-8 -*-
"""Code1_Vivli_EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vyMt21mIfQ4kriLveNWn_A6D4vcUaLig

# Exploratory data analysis (EDA)

## Data Cleaning and descriptive statistics
"""

# Antifungal Resistance EDA Notebook
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style='whitegrid')
from google.colab import drive
drive.mount('/content/drive')
df = pd.read_excel('/content/drive/MyDrive/vivli_sentry_2010_2023.xlsx')
df.head()

!pip install seaborn openpyxl --quiet
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="whitegrid", palette="muted")
df = pd.read_excel('/content/drive/MyDrive/vivli_sentry_2010_2023.xlsx')  # Replace with correct path if different
c_glabrata_df = df[df['Species'].str.lower().str.contains('glabrata')]
print(f"Total records of Candida glabrata: {len(c_glabrata_df)}")

# Distribution by Age Group
plt.figure(figsize=(10, 6))
sns.countplot(data=c_glabrata_df, x='Age Group', order=c_glabrata_df['Age Group'].value_counts().index, palette="Blues")
plt.title('Distribution of Candida glabrata by Age Group')
plt.xlabel('Age Group')
plt.ylabel('Number of Cases')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Distribution by Gender
plt.figure(figsize=(8, 5))
sns.countplot(data=c_glabrata_df, x='Gender', palette="coolwarm")
plt.title('Distribution of Candida glabrata by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Cases')
plt.tight_layout()
plt.show()

# Distribution by Source (Sputum / Blood Culture / Other)
plt.figure(figsize=(10, 6))
sns.countplot(data=c_glabrata_df, x='Source', order=c_glabrata_df['Source'].value_counts().index, palette="viridis")
plt.title('Distribution of Candida glabrata by Sample Source')
plt.xlabel('Source of Isolation')
plt.ylabel('Number of Cases')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Summary: High Prevalence Reporting
print("\n High Prevalence Summary:")
age_group_counts = c_glabrata_df['Age Group'].value_counts().reset_index()
gender_counts = c_glabrata_df['Gender'].value_counts().reset_index()
source_counts = c_glabrata_df['Source'].value_counts().reset_index()

print("\nTop Age Groups with High Prevalence:")
print(age_group_counts)

print("\nGender Distribution:")
print(gender_counts)

print("\nSource of Isolation Distribution:")
print(source_counts)

"""## Missing Values"""

interpret_cols = [col for col in df.columns if '_I' in col]

for col in interpret_cols:
    print(f"{col}: {df[col].unique()}")

"""## Data Normalising as S/I/R for resistance patterns"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style='whitegrid')
from google.colab import drive
drive.mount('/content/drive')
df = pd.read_excel('/content/drive/MyDrive/vivli_sentry_2010_2023.xlsx')
df.head()
import re
df.columns = df.columns.str.strip().str.replace(r'[\(\)\s]', '_', regex=True).str.replace('__', '_')
df.info()
df.isnull().sum()
mic_cols = [col for col in df.columns if any(drug in col for drug in [
    'Anidulafungin', 'Caspofungin', 'Micafungin', 'Isavuconazole', 'Fluconazole',
    'Itraconazole', 'Voriconazole', 'Posaconazole', 'Amphotericin', 'Flucytosine'
]) and '_I' not in col]
interpret_cols = [col for col in df.columns if '_I' in col]
interpretation_map = {
    'Susceptible': 'S', 'Resistant': 'R', 'Intermediate': 'I',
    'S': 'S', 'I': 'I', 'R': 'R'
}
for col in interpret_cols:
    df[col] = df[col].map(interpretation_map)

# Summary stats
print(df[mic_cols].describe())
# Species counts
plt.figure(figsize=(10,6))
df['Species'].value_counts().head(10).plot(kind='bar', color= 'maroon')
plt.title('Top 10 Fungal Species')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
# MIC distribution
for drug in mic_cols:
    plt.figure(figsize=(8, 4))
    sns.histplot(df[drug].dropna(), bins=30, kde=True)
    plt.title(f'MIC Distribution for {drug}')
    plt.xlabel('MIC Value')
    plt.ylabel('Frequency')
    plt.tight_layout()
    plt.show()
#by species- MIC distribution
top_species = df['Species'].value_counts().nlargest(5).index.tolist()
subset_species = df[df['Species'].isin(top_species)]

for drug in mic_cols:
    plt.figure(figsize=(10, 5))
    sns.boxplot(data=subset_species, x='Species', y=drug)
    plt.title(f'{drug} MIC Values Across Top Species')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# yearly trends
for drug_I in ['Fluconazole_CLSI_I', 'Voriconazole_CLSI_I']:
    if drug_I in df.columns:
        year_trend = df.groupby('Year')[drug_I].value_counts(normalize=True).unstack()
        year_trend.plot(kind='bar', stacked=True, figsize=(12, 6))
        plt.title(f'{drug_I} Susceptibility Trend by Year')
        plt.ylabel('Proportion')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

# Resistance heatmap
resistance_matrix = df.groupby('Species')[interpret_cols].apply(lambda x: (x == 'R').mean())
resistance_matrix = resistance_matrix.loc[resistance_matrix.sum(axis=1).sort_values(ascending=False).head(10).index]

plt.figure(figsize=(15, 6))
sns.heatmap(resistance_matrix, cmap='Reds', annot=True, fmt=".2f")
plt.title('Resistance Heatmap: Top 10 Fungal Species')
plt.tight_layout()
plt.show()

# Resistance based on Age and gender
if 'Fluconazole_CLSI_I' in df.columns:
    sns.countplot(data=df, x='Gender', hue='Fluconazole_CLSI_I')
    plt.title('Fluconazole Susceptibility by Gender')
    plt.show()

if 'Caspofungin_CLSI_I' in df.columns:
    sns.countplot(data=df, x='Age_Group', hue='Caspofungin_CLSI_I')
    plt.title('Caspofungin Susceptibility by Age Group')
    plt.xticks(rotation=45)
    plt.show()
# Top 5 Fungal Species and Their Resistance Pattern
top5_species = ['Candida albicans', 'Candida glabrata', 'Candida parapsilosis', 'Candida tropicalis', 'Aspergillus fumigatus']
species_pattern = df[df['Species'].isin(top5_species)]

# Calculate proportion of S, I, R for each species and each drug
from collections import defaultdict
pattern_data = defaultdict(dict)

for species in top5_species:
    subset = species_pattern[species_pattern['Species'] == species]
    for drug in interpret_cols:
        counts = subset[drug].value_counts(normalize=True) * 100
        pattern_data[(species, drug.replace('_CLSI_I',''))] = {
            'S': counts.get('S', 0),
            'I': counts.get('I', 0),
            'R': counts.get('R', 0)
        }

pattern_df = pd.DataFrame(pattern_data).T.reset_index()
pattern_df.columns = ['Species', 'Drug', 'S', 'I', 'R']

# Plot grouped bar chart
plot_df = pattern_df.melt(id_vars=['Species','Drug'], value_vars=['S','I','R'], var_name='variable', value_name='value')
plt.figure(figsize=(18, 8))
sns.barplot(data=plot_df, x='Drug', y='value', hue='variable', ci=None,
            palette='Set1', hue_order=['S', 'I', 'R'], dodge=True)
plt.title('AMR Pattern (S, I, R) for Top 5 Fungal Species')
plt.ylabel('Percentage')
plt.xticks(rotation=45)
plt.legend(title='Interpretation')
plt.tight_layout()
plt.show()

print("\nDetailed resistance pattern (S, I, R %) for top 5 fungal species:")
print(pattern_df.round(2))

"""# **Country-level Resistance Patterns by drugs**"""

# Country-level Resistance Patterns

df['Country'] = df['Country'].astype(str)

for drug_I in ['Fluconazole_CLSI_I', 'Caspofungin_CLSI_I', 'Voriconazole_CLSI_I', 'Anidulafungin_CLSI_I','Micafungin_CLSI_I', 'Isavuconazole_CLSI_I']:

    if drug_I in df.columns:
        country_trend = df.groupby('Country')[drug_I].value_counts(normalize=True).unstack()
        country_trend = country_trend.fillna(0)
        country_trend.plot(kind='bar', stacked=True, figsize=(14, 6))
        plt.title(f'{drug_I} Susceptibility by Country')
        plt.ylabel('Proportion')
        plt.xticks(rotation=90)
        plt.tight_layout()
        plt.show()

"""#**Fungal Species and Their Resistance Pattern by drug**

## **Top 5 Fungal Species and Their Resistance Pattern by drug**
"""

# Top 5 Fungal Species and Their Resistance Pattern

top5_species = ['Candida auris', 'Candida glabrata', 'Candida parapsilosis', 'Candida tropicalis', 'Aspergillus fumigatus']
species_pattern = df[df['Species'].isin(top5_species)]

from collections import defaultdict
pattern_data = defaultdict(dict)

for species in top5_species:
    subset = species_pattern[species_pattern['Species'] == species]
    for drug in interpret_cols:
        counts = subset[drug].value_counts(normalize=True) * 100
        pattern_data[(species, drug.replace('_CLSI_I',''))] = {
            'S': counts.get('S', 0),
            'I': counts.get('I', 0),
            'R': counts.get('R', 0)
        }

pattern_df = pd.DataFrame(pattern_data).T.reset_index()
pattern_df.columns = ['Species', 'Drug', 'S', 'I', 'R']

for species in top5_species:
    subset = pattern_df[pattern_df['Species'] == species]
    plot_df = subset.melt(id_vars=['Species','Drug'], value_vars=['S','I','R'], var_name='variable', value_name='value')
    plt.figure(figsize=(12, 6))
    sns.barplot(data=plot_df, x='Drug', y='value', hue='variable', palette='Set1', hue_order=['S', 'I', 'R'])
    plt.title(f'AMR Pattern (S, I, R) for {species}')
    plt.ylabel('Percentage')
    plt.xticks(rotation=45)
    plt.legend(title='Interpretation')
    plt.tight_layout()
    plt.show()

print("\nDetailed resistance pattern (S, I, R %) for top 5 fungal species:")
print(pattern_df.round(2))

"""## Multidrug resistant species"""

interpret_cols = [col for col in df.columns if '_I' in col]
df_clean = df.dropna(subset=['Species'])
df_clean['Resistance_Count'] = df_clean[interpret_cols].apply(lambda row: sum(row == 'R'), axis=1)
resistant_samples = df_clean[df_clean['Resistance_Count'] > 0]
resistance_summary = resistant_samples.groupby('Species')['Resistance_Count'].agg(
    Samples_Resistant='count',
    Avg_Drugs_Resistant='mean',
    Max_Drugs_Resistant='max'
).reset_index()

# Sort and get top 10 resistant species
top10_resistant_species = resistance_summary.sort_values(by='Max_Drugs_Resistant', ascending=False).head(10)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 6))
sns.barplot(
    data=top10_resistant_species,
    x='Max_Drugs_Resistant',
    y='Species',
    palette='Reds_r'
)
plt.title('Top 10 Fungal Species Resistant to the Most Drugs')
plt.xlabel('Maximum Number of Drugs Resistant (per sample)')
plt.ylabel('Fungal Species')
plt.grid(axis='x', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

interpret_cols = [col for col in df.columns if '_I' in col]
df_clean = df.dropna(subset=['Species'])
df_clean['Resistance_Count'] = df_clean[interpret_cols].apply(lambda row: sum(row == 'R'), axis=1)
resistant_samples = df_clean[df_clean['Resistance_Count'] > 0]
melted = resistant_samples.melt(id_vars='Species', value_vars=interpret_cols,
                                 var_name='Drug', value_name='Interpretation')
resistant_only = melted[melted['Interpretation'] == 'R']
resistance_counts = resistant_only.groupby(['Species', 'Drug']).size().reset_index(name='Resistant_Count')
pivot_df = resistance_counts.pivot(index='Species', columns='Drug', values='Resistant_Count').fillna(0)

plt.figure(figsize=(14, 8))
sns.heatmap(pivot_df, annot=True, fmt='.0f', cmap='Reds', linewidths=0.5)
plt.title('Drug-wise Resistance Counts per Fungal Species (Only Resistant Samples)')
plt.xlabel('Drug')
plt.ylabel('Fungal Species')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

# Show top 10 species by total resistance counts
top_species = resistance_counts.groupby('Species')['Resistant_Count'].sum().sort_values(ascending=False).head(10).index
top_pivot = pivot_df.loc[pivot_df.index.isin(top_species)]

# Year-wise Heatmap: Resistant species per year

df_clean['Year'] = pd.to_numeric(df_clean['Year'], errors='coerce')
resistant_samples = df_clean[df_clean['Resistance_Count'] > 0].dropna(subset=['Year', 'Species'])
year_species_resistance = resistant_samples.groupby(['Year', 'Species']).size().reset_index(name='Resistant_Count')
year_species_pivot = year_species_resistance.pivot(index='Species', columns='Year', values='Resistant_Count').fillna(0)

plt.figure(figsize=(16, 10))
sns.heatmap(year_species_pivot, cmap='Oranges', linewidths=0.5, annot=True, fmt=".0f")
plt.title('Year-wise Resistance Counts per Fungal Species (≥1 Drug)')
plt.xlabel('Year')
plt.ylabel('Fungal Species')
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

# Country-wise Heatmap: Resistant species per country

resistant_samples = df_clean[df_clean['Resistance_Count'] > 0].dropna(subset=['Country', 'Species'])
country_species_resistance = resistant_samples.groupby(['Country', 'Species']).size().reset_index(name='Resistant_Count')
country_species_pivot = country_species_resistance.pivot(index='Species', columns='Country', values='Resistant_Count').fillna(0)
plt.figure(figsize=(18, 12))
sns.heatmap(country_species_pivot, cmap='Reds', linewidths=0.5, annot=True, fmt=".0f")
plt.title('Country-wise Resistance Counts per Fungal Species (≥1 Drug)')
plt.xlabel('Country')
plt.ylabel('Fungal Species')
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

"""# **Candida Glabrata- Composite phenotype**

# **Candida glabarata**
"""

!pip install plotly pycountry
import plotly.express as px
import pycountry
import pandas as pd

candida_glab_df = df[df['Species'].str.contains('glabrata', case=False, na=False)]

def get_iso3(country_name):
    try:
        return pycountry.countries.lookup(country_name).alpha_3
    except:
        return None

candida_glab_df['iso_alpha'] = candida_glab_df['Country'].apply(get_iso3)


glab_country_year = candida_glab_df.groupby(['iso_alpha', 'Country', 'Year'])[interpret_cols] \
    .apply(lambda x: (x == 'R').mean()).reset_index()

glab_long = glab_country_year.melt(id_vars=['iso_alpha', 'Country', 'Year'],
                                      var_name='Drug', value_name='Resistance_Proportion')
glab_long['Drug'] = glab_long['Drug'].str.replace('_CLSI_I', '')

drug_to_plot = "Fluconazole"
plot_df = glab_long[glab_long['Drug'] == drug_to_plot].dropna()
plot_df['Year'] = pd.to_numeric(plot_df['Year'], errors='coerce')
plot_df = plot_df.dropna(subset=['Year'])
plot_df['Year'] = plot_df['Year'].astype(int)
plot_df = plot_df.sort_values(by='Year')

# plot spatiotemporal heatmap
fig = px.choropleth(
    plot_df,
    locations='iso_alpha',
    color='Resistance_Proportion',
    hover_name='Country',
    animation_frame='Year',
    color_continuous_scale='Reds',
    range_color=(0, 1),
    title=f"Spatiotemporal Resistance of Candida glabrata to {drug_to_plot}"
)

fig.update_layout(geo=dict(showframe=False, showcoastlines=True))
fig.show()
fig.write_html("Candida_glabrata_resistance_map.html")

"""## **Spatiotemporal snapshot**"""

import plotly.express as px
import pycountry
import pandas as pd
import os


candida_glab_df = df[df['Species'].str.contains('glabrata', case=False, na=False)].copy()

def get_iso3(country_name):
    try:
        return pycountry.countries.lookup(country_name).alpha_3
    except:
        return None

candida_glab_df['iso_alpha'] = candida_glab_df['Country'].apply(get_iso3)
interpret_cols = [col for col in candida_glab_df.columns if '_CLSI_I' in col]
glab_country_year = candida_glab_df.groupby(['iso_alpha', 'Country', 'Year'])[interpret_cols] \
    .apply(lambda x: (x == 'R').mean()).reset_index()

glab_long = glab_country_year.melt(id_vars=['iso_alpha', 'Country', 'Year'],
                                      var_name='Drug', value_name='Resistance_Proportion')
glab_long['Drug'] = glab_long['Drug'].str.replace('_CLSI_I', '')

drug_to_plot = "Fluconazole"
plot_df = glab_long[glab_long['Drug'] == drug_to_plot].dropna()
plot_df['Year'] = pd.to_numeric(plot_df['Year'], errors='coerce')
plot_df = plot_df.dropna(subset=['Year'])
plot_df['Year'] = plot_df['Year'].astype(int)
plot_df = plot_df.sort_values(by='Year')

plot_df['Year'] = pd.to_numeric(plot_df['Year'], errors='coerce').astype(int)
fig_2014 = px.choropleth(
    plot_df[plot_df['Year'] == 2014],
    locations='iso_alpha',
    color='Resistance_Proportion',
    hover_name='Country',
    color_continuous_scale='Reds',
    range_color=(0, 1),
    title=f"Candida glabrata Resistance to {drug_to_plot} in 2014"
)
fig_2014.update_layout(geo=dict(showframe=False, showcoastlines=True))
fig_2014.show()
fig_2017 = px.choropleth(
    plot_df[plot_df['Year'] == 2017],
    locations='iso_alpha',
    color='Resistance_Proportion',
    hover_name='Country',
    color_continuous_scale='Reds',
    range_color=(0, 1),
    title=f"Candida glabrata Resistance to {drug_to_plot} in 2017"
)
fig_2017.update_layout(geo=dict(showframe=False, showcoastlines=True))
fig_2017.show()

"""## **Intermediate considered as S- Scenario A**"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_resistance_with_composite.csv')
unique_phenotypes = df['Composite_Phenotype_ISasS'].value_counts()
print("🧬 Unique Phenotypes with I treated as S:\n")
print(unique_phenotypes)

country_pheno = df.groupby(['Country', 'Composite_Phenotype_ISasS']).size().reset_index(name='Count')
heatmap_data = country_pheno.pivot(index='Country', columns='Composite_Phenotype_ISasS', values='Count').fillna(0)
top_phenos = unique_phenotypes.head(10).index.tolist()
heatmap_filtered = heatmap_data[top_phenos]
plt.figure(figsize=(14, 8))
sns.heatmap(heatmap_filtered, annot=True, fmt=".0f", cmap='YlOrRd', linewidths=0.5)
plt.title("Country-wise Distribution of Top Candida glabrata Resistance Phenotypes (I treated as S)", fontsize=14)
plt.xlabel("Resistance Phenotype")
plt.ylabel("Country")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_resistance_with_composite.csv')

#Group 1: Country-wise Composite Phenotype Distribution
country_pheno_table = df.groupby(['Country', 'Composite_Phenotype_ISasS']).size().unstack(fill_value=0)

print("Country-wise Distribution of Composite Phenotypes (I treated as S):")
display(country_pheno_table)

#Group 2: Year-wise Composite Phenotype Distribution
year_pheno_table = df.groupby(['Year', 'Composite_Phenotype_ISasS']).size().unstack(fill_value=0)

print("Year-wise Distribution of Composite Phenotypes (I treated as S):")
display(year_pheno_table)

"""## Top 6 countries and only the dominant phenotypes- stacked bar plotes"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_resistance_with_composite.csv')

selected_countries = ['belgium', 'germany', 'usa', 'france', 'spain', 'italy']
target_phenotypes = ['RRRR', 'SSSS', 'SSSR', 'RSSS','RRRS']

df['Country'] = df['Country'].str.strip().str.lower()
df = df[df['Country'].isin(selected_countries)]

df['Year'] = pd.to_numeric(df['Year'], errors='coerce').astype('Int64')
df = df.dropna(subset=['Year'])
df['Year'] = df['Year'].astype(int)
df = df[df['Composite_Phenotype_ISasS'].isin(target_phenotypes)]
grouped = df.groupby(['Country', 'Year', 'Composite_Phenotype_ISasS']).size().reset_index(name='Count')
pivot_df = grouped.pivot_table(index=['Country', 'Year'], columns='Composite_Phenotype_ISasS', values='Count', fill_value=0).reset_index()
fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(18, 8), sharey=True)
axes = axes.flatten()
colors = {
    'SSSS': '#8bc34a',
    'SSSR': '#fbc02d',
    'RSSS': '#03a9f4',
    'RRRR': '#e53935'
}

for i, country in enumerate(selected_countries):
    ax = axes[i]
    country_data = pivot_df[pivot_df['Country'] == country]
    if country_data.empty:
        ax.text(0.5, 0.5, 'No Data', ha='center', va='center', fontsize=12)
        ax.set_title(country.title())
        ax.axis('off')
        continue

    bottom = None
    for phenotype in target_phenotypes:
        if phenotype in country_data.columns:
            values = country_data[phenotype]
        else:
            values = [0] * len(country_data)
        ax.bar(country_data['Year'], values, bottom=bottom, label=phenotype, color=colors.get(phenotype, None))
        bottom = values if bottom is None else bottom + values

    ax.set_title(country.title())
    ax.set_xlabel("Year")
    ax.set_ylabel("Isolate Count")
    ax.set_xticks(sorted(country_data['Year'].unique()))
    ax.tick_params(axis='x', rotation=45)

axes[0].legend(title='Phenotype')
fig.suptitle("Candida glabrata: Dominant Resistance Phenotypes (2010–2023)", fontsize=16)
plt.tight_layout()
plt.subplots_adjust(top=0.88)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_resistance_with_composite.csv')

selected_countries = ['belgium', 'germany', 'usa', 'france', 'spain', 'italy']
target_phenotypes = ['RRRR', 'SSSS', 'SSSR', 'RSSS', 'RRRS']
df['Country'] = df['Country'].str.strip().str.lower()
df = df[df['Country'].isin(selected_countries)]

df['Year'] = pd.to_numeric(df['Year'], errors='coerce').astype('Int64')
df = df.dropna(subset=['Year'])
df['Year'] = df['Year'].astype(int)
df = df[df['Composite_Phenotype_ISasS'].isin(target_phenotypes)]

grouped = df.groupby(['Country', 'Year', 'Composite_Phenotype_ISasS']).size().reset_index(name='Count')
total_per_year = grouped.groupby(['Country', 'Year'])['Count'].transform('sum')
grouped['Percent'] = (grouped['Count'] / total_per_year) * 100

pivot_df = grouped.pivot_table(index=['Country', 'Year'], columns='Composite_Phenotype_ISasS', values='Percent', fill_value=0).reset_index()

fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(18, 8), sharey=True)
axes = axes.flatten()

colors = {
    'SSSS': '#8bc34a',
    'SSSR': '#fbc02d',
    'RSSS': '#03a9f4',
    'RRRR': '#e53935'
}

for i, country in enumerate(selected_countries):
    ax = axes[i]
    country_data = pivot_df[pivot_df['Country'] == country]

    if country_data.empty:
        ax.text(0.5, 0.5, 'No Data', ha='center', va='center', fontsize=12)
        ax.set_title(country.title())
        ax.axis('off')
        continue

    bottom = np.zeros(len(country_data))
    for phenotype in target_phenotypes:
        values = country_data.get(phenotype, pd.Series([0]*len(country_data)))
        ax.bar(country_data['Year'], values, bottom=bottom, label=phenotype, color=colors.get(phenotype))
        bottom += values

    ax.set_title(country.title())
    ax.set_xlabel("Year")
    ax.set_ylabel("% of Isolates")
    ax.set_xticks(sorted(country_data['Year'].unique()))
    ax.tick_params(axis='x', rotation=45)

handles, labels = axes[0].get_legend_handles_labels()
fig.legend(handles, labels, title="Phenotype", loc='lower center', ncol=len(target_phenotypes), bbox_to_anchor=(0.5, -0.03), fontsize=12)
fig.suptitle("Candida glabrata: Dominant Resistance Phenotypes (2010–2023) [I → S] (%)", fontsize=16)
plt.tight_layout()
plt.subplots_adjust(top=0.9, bottom=0.15)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_resistance_with_composite.csv')

western_europe_countries = ['belgium', 'france', 'germany', 'hungary', 'ireland', 'italy', 'spain']
usa = ['usa']
target_phenotypes = ['SSSS', 'SSSR', 'RSSS', 'RRRR', 'RRRS']

df['Country'] = df['Country'].str.strip().str.lower()

df['Region'] = df['Country'].apply(lambda x: 'Western Europe' if x in western_europe_countries else ('USA' if x in usa else None))
df = df[df['Region'].notnull()]

df['Year'] = pd.to_numeric(df['Year'], errors='coerce').astype('Int64')
df = df.dropna(subset=['Year'])
df['Year'] = df['Year'].astype(int)

df = df[df['Composite_Phenotype_ISasS'].isin(target_phenotypes)]

grouped = df.groupby(['Region', 'Year', 'Composite_Phenotype_ISasS']).size().reset_index(name='Count')
pivot_df = grouped.pivot_table(index=['Region', 'Year'], columns='Composite_Phenotype_ISasS', values='Count', fill_value=0).reset_index()

reds = plt.cm.Reds(np.linspace(0.4, 0.9, len(target_phenotypes)))
colors = dict(zip(target_phenotypes, reds))

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 8), sharey=True)
regions = ['USA', 'Western Europe']

for i, region in enumerate(regions):
    ax = axes[i]
    region_data = pivot_df[pivot_df['Region'] == region]
    if region_data.empty:
        ax.text(0.5, 0.5, 'No Data', ha='center', va='center', fontsize=12)
        ax.set_title(region)
        continue

    bottom = np.zeros(len(region_data))

    for j, phenotype in enumerate(target_phenotypes):
        values = region_data[phenotype] if phenotype in region_data.columns else [0]*len(region_data)
        ax.barh(region_data['Year'], values, left=bottom, label=phenotype, color=colors[phenotype])
        bottom += values

    total_isolates = int(bottom.sum())
    ax.set_title(f"{region}\nTotal Isolates: {total_isolates}", fontsize=14)
    ax.set_xlabel("Isolate Count")
    ax.set_ylabel("Year")
    ax.invert_yaxis()

handles, labels = axes[0].get_legend_handles_labels()
fig.legend(handles, labels, title="Phenotype", loc='lower center', ncol=len(target_phenotypes), fontsize=12, title_fontsize=13)

plt.suptitle("Candida glabrata Composite Phenotype Distribution \nUSA vs Western Europe (2010–2023)", fontsize=16)
plt.tight_layout(rect=[0, 0.08, 1, 0.92])
plt.show()

"""## **Evolution of resistnace phenotypes across the countries over the time**"""

import pandas as pd
import plotly.express as px

df = pd.read_csv('/content/drive/MyDrive/C_glabrata.csv')
df['Country'] = df['Country'].str.strip().str.title()
df = df[df['Year'].between(2010, 2023)]
dominant_by_country_year = (
    df.groupby(['Country', 'Year', 'Resistance_Phenotype'])
    .size()
    .reset_index(name='Count')
)

total = dominant_by_country_year.groupby(['Country', 'Year'])['Count'].sum().reset_index(name='Total')

merged = pd.merge(dominant_by_country_year, total, on=['Country', 'Year'])
merged['Percent'] = (merged['Count'] / merged['Total']) * 100
dominant = merged.sort_values(['Country', 'Year', 'Percent'], ascending=[True, True, False])
dominant = dominant.groupby(['Country', 'Year']).first().reset_index()
target_countries = [
    'Belgium', 'Usa', 'Italy','Ireland', 'Hungary', 'France',
    'Germany', 'Spain',
]
dominant = dominant[dominant['Country'].isin(target_countries)]

# Plot: Spatiotemporal animated map
fig = px.choropleth(
    dominant,
    locations="Country",
    locationmode="country names",
    color="Percent",
    hover_name="Country",
    hover_data=["Year", "Resistance_Phenotype", "Percent"],
    animation_frame="Year",
    color_continuous_scale="OrRd",
    title="Evolution of Dominant Candida glabrata Phenotypes",
    range_color=(0, 100)
)

fig.update_layout(geo=dict(showframe=False, showcoastlines=False))
fig.show()
fig.write_html("candida_glabrata_phenotype_dominantI as I_resistance_map.html")

"""# **Spatiotemporal for composite phenotype in USA and western europe**"""

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pycountry
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_I as S_airpollution.csv')

df['Country'] = df['Country'].str.strip().str.title()
df = df[df['Year'].between(2010, 2023)]

target_phenotypes = ['SSSS', 'SSSR', 'RSSS', 'RRRR', 'RRRS']
target_countries = [
    'Belgium', 'France', 'Germany', 'Hungary', 'Ireland', 'Italy', 'Spain', 'Usa'
]
dominant_by_country_year = (
    df.groupby(['Country', 'Year', 'Composite_Phenotype_ISasS'])
    .size()
    .reset_index(name='Count')
)

total = dominant_by_country_year.groupby(['Country', 'Year'])['Count'].sum().reset_index(name='Total')

merged = pd.merge(dominant_by_country_year, total, on=['Country', 'Year'])
merged['Percent'] = (merged['Count'] / merged['Total']) * 100

merged = merged[merged['Country'].isin(target_countries)]

def get_iso3(country_name):
    try:
        return pycountry.countries.lookup(country_name).alpha_3
    except:
        return None

merged['ISO3'] = merged['Country'].apply(get_iso3)

cols = len(target_phenotypes)
rows = 1

fig = make_subplots(
    rows=rows,
    cols=cols,
    specs=[[{'type': 'choropleth'}]*cols],
    subplot_titles=[f"Dominant Phenotype: {pheno}" for pheno in target_phenotypes]
)

selected_year = 2020
data_year = merged[merged['Year'] == selected_year]
for idx, pheno in enumerate(target_phenotypes):
    df_pheno = data_year[data_year['Composite_Phenotype_ISasS'] == pheno]
    fig.add_trace(
        go.Choropleth(
            locations=df_pheno['ISO3'],
            z=df_pheno['Percent'],
            text=df_pheno['Country'],
            colorscale='Reds',
            colorbar_title='%',
            zmin=0,
            zmax=100,
            showscale=False,
            hovertemplate='<b>%{text}</b><br>Percent: %{z:.1f}%<extra></extra>'
        ),
        row=1,
        col=idx+1
    )
fig.update_layout(
    coloraxis=dict(colorscale='Reds', cmin=0, cmax=100, colorbar=dict(title="%")),
    title_text=f"Dominant Candida glabrata Phenotypes in USA and Western Europe ({selected_year})",
    geo=dict(showframe=False, showcoastlines=False),
    height=500,
    width=1800
)
for i in range(len(fig.data)):
    fig.data[i].coloraxis = 'coloraxis'

fig.show()
fig.write_html(f"C_glabrata_dominant_phenotypes_{selected_year}_subplots.html")

import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pycountry
df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_I as S_airpollution.csv')
df['Country'] = df['Country'].str.strip().str.title()
df = df[df['Year'].between(2010, 2023)]
target_phenotypes = ['SSSS', 'SSSR']
target_countries = [
    'Belgium', 'France', 'Germany', 'Hungary', 'Ireland', 'Italy', 'Spain', 'Usa'
]
dominant_by_country_year = (
    df.groupby(['Country', 'Year', 'Composite_Phenotype_ISasS'])
    .size()
    .reset_index(name='Count')
)
total = dominant_by_country_year.groupby(['Country', 'Year'])['Count'].sum().reset_index(name='Total')
merged = pd.merge(dominant_by_country_year, total, on=['Country', 'Year'])
merged['Proportion'] = merged['Count'] / merged['Total']
merged = merged[(merged['Country'].isin(target_countries)) &
                (merged['Composite_Phenotype_ISasS'].isin(target_phenotypes))]

def get_iso3(country_name):
    try:
        return pycountry.countries.lookup(country_name).alpha_3
    except:
        return None

merged['ISO3'] = merged['Country'].apply(get_iso3)

cols = len(target_phenotypes)
rows = 1

fig = make_subplots(
    rows=rows,
    cols=cols,
    specs=[[{'type': 'choropleth'}]*cols],
    subplot_titles=[f"Resistance Proportion: {pheno}" for pheno in target_phenotypes]
)
selected_year = 2021
data_year = merged[merged['Year'] == selected_year]
for idx, pheno in enumerate(target_phenotypes):
    df_pheno = data_year[data_year['Composite_Phenotype_ISasS'] == pheno]
    fig.add_trace(
        go.Choropleth(
            locations=df_pheno['ISO3'],
            z=df_pheno['Proportion'],
            text=df_pheno['Country'],
            colorscale='Reds',
            colorbar_title='Proportion',
            zmin=0,
            zmax=1,
            showscale=False,
            hovertemplate='<b>%{text}</b><br>Proportion: %{z:.2f}<extra></extra>'
        ),
        row=1,
        col=idx+1
    )
fig.update_layout(
    coloraxis=dict(colorscale='Reds', cmin=0, cmax=1, colorbar=dict(title="Proportion")),
    title_text=f"Spatiotemporal Map of SSSS and SSSR Phenotypes of Candida glabrata (USA and Western Europe) - {selected_year}",
    geo=dict(showframe=False, showcoastlines=False),
    height=500,
    width=1200
)
for i in range(len(fig.data)):
    fig.data[i].coloraxis = 'coloraxis'

fig.show()
fig.write_html(f"C_glabrata_SSSR_SSSS_comparative_{selected_year}.html")

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_I as S_airpollution.csv')
df['Country'] = df['Country'].str.strip().str.title()
western_europe = ['Belgium', 'France', 'Germany', 'Hungary', 'Ireland', 'Italy', 'Spain']
df['Region'] = df['Country'].apply(lambda x: 'Western Europe' if x in western_europe else ('USA' if x == 'Usa' else None))
df = df[df['Region'].notnull()]
target_phenotypes = ['SSSS', 'SSSR', 'RSSS', 'RRRS', 'RRRR']
grouped = df[df['Composite_Phenotype_ISasS'].isin(target_phenotypes)] \
    .groupby(['Region', 'Year', 'Composite_Phenotype_ISasS']).size().reset_index(name='Count')
result = []

for region in ['USA', 'Western Europe']:
    region_data = grouped[grouped['Region'] == region]
    for pheno in target_phenotypes:
        pheno_data = region_data[region_data['Composite_Phenotype_ISasS'] == pheno]
        if not pheno_data.empty:
            max_row = pheno_data.loc[pheno_data['Count'].idxmax()]
            result.append({
                'Region': region,
                'Phenotype': pheno,
                'Max_Year': max_row['Year'],
                'Isolate_Count': max_row['Count']
            })
        else:
            result.append({
                'Region': region,
                'Phenotype': pheno,
                'Max_Year': 'No Data',
                'Isolate_Count': 0
            })
result_df = pd.DataFrame(result)
print("Year contributing most to each phenotype in USA and Western Europe:")
print(result_df)
result_df.to_csv('dominant_years_per_phenotype_region.csv', index=False)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv('/content/drive/MyDrive/Candida_glabarata_I as S_airpollution.csv')
df['Country'] = df['Country'].str.strip().str.title()
df = df[df['Year'].between(2010, 2023)]
target_phenotypes = ['SSSS', 'SSSR']
western_europe = ['Belgium', 'France', 'Germany', 'Hungary', 'Ireland', 'Italy', 'Spain']
df['Region'] = df['Country'].apply(lambda x: 'Western Europe' if x in western_europe else ('USA' if x == 'Usa' else None))

df = df[df['Region'].isin(['USA', 'Western Europe'])]
df = df[df['Composite_Phenotype_ISasS'].isin(target_phenotypes)]

counts = df.groupby(['Region', 'Year', 'Composite_Phenotype_ISasS']).size().reset_index(name='Isolate_Count')

pivot_df = counts.pivot_table(index=['Region', 'Year'], columns='Composite_Phenotype_ISasS', values='Isolate_Count', fill_value=0).reset_index()

print("\nYear-wise contribution to SSSS and SSSR in USA and Western Europe:")
print(pivot_df)

sns.set(style="whitegrid", font_scale=1.2)
plt.figure(figsize=(12,6))

for region in ['USA', 'Western Europe']:
    temp = pivot_df[pivot_df['Region'] == region]
    plt.plot(temp['Year'], temp['SSSS'], marker='o', label=f'SSSS - {region}')
    plt.plot(temp['Year'], temp['SSSR'], marker='s', label=f'SSSR - {region}')

plt.title("Year-wise Contribution to SSSS and SSSR (Candida glabrata)")
plt.xlabel("Year")
plt.ylabel("Isolate Count")
plt.legend()
plt.xticks(temp['Year'], rotation=45)
plt.tight_layout()
plt.show()

"""# **Integration of air quality and AMR**"""

import pandas as pd
glabrata_df = pd.read_csv('/content/drive/MyDrive/C_glabrata.csv')
air_df = pd.read_excel('/content/drive/MyDrive/Air quality_WHO.xlsx')
air_df = air_df[[
    'country_name', 'year', 'pm10_concentration', 'pm25_concentration', 'no2_concentration',
    'pm10_tempcov', 'pm25_tempcov', 'no2_tempcov'
]]
air_df = air_df.drop_duplicates(subset=['country_name', 'year'])
glabrata_df['Country'] = glabrata_df['Country'].str.strip().str.lower()
air_df['country_name'] = air_df['country_name'].str.strip().str.lower()

merged_df = glabrata_df.merge(
    air_df,
    how='left',
    left_on=['Country', 'Year'],
    right_on=['country_name', 'year']
)

merged_df.drop(['country_name', 'year'], axis=1, inplace=True)
merged_df.to_csv('/content/Candida_glabrata_with_air_quality.csv', index=False)

print("Merged dataset saved with air quality columns.")

import pandas as pd
air = pd.read_excel('/content/drive/MyDrive/Air quality_WHO.xlsx')
glabrata = pd.read_csv('/content/drive/MyDrive/C_glabrata.csv')

air.columns = air.columns.str.strip().str.lower().str.replace(" ", "_")
glabrata.columns = glabrata.columns.str.strip().str.lower().str.replace(" ", "_")
country_map = {
    'usa': 'United States of America',
    'uk': 'United Kingdom',
    'south korea': 'Republic of Korea',
    'russia': 'Russian Federation',
    'iran': 'Iran (Islamic Republic of)',
    'venezuela': 'Venezuela (Bolivarian Republic of)',
    'laos': "Lao People's Democratic Republic",
    'moldova': 'Republic of Moldova',
    'syrian arab republic': 'Syrian Arab Republic',

}
glabrata['country_mapped'] = glabrata['country'].str.lower().replace(country_map)

pollution_cols = ['pm10_concentration', 'pm25_concentration', 'no2_concentration',
                  'pm10_tempcov', 'pm25_tempcov', 'no2_tempcov']

air[pollution_cols] = air[pollution_cols].apply(pd.to_numeric, errors='coerce')

merged = pd.merge(
    glabrata,
    air[['country_name', 'year'] + pollution_cols],
    how='left',
    left_on=['country_mapped', 'year'],
    right_on=['country_name', 'year']
)
merged.drop(columns=['country_name'], inplace=True)
merged = merged.rename(columns={col: col.upper() for col in pollution_cols})
merged.to_excel('/content/c_glabrata_with_pollution.xlsx', index=False)
print("✅ Merged dataset saved as 'c_glabrata_with_pollution.xlsx'")